package main

import (
	"bytes"
	"crypto/rand"
	"encoding/binary"
	"fmt"
	"net"
	"time"
)

func buildClientHelloTLS12(protocol int, ciphers []uint16, extensions []uint16) ([]byte, error) {
	var buf bytes.Buffer

	// binary.Write(&buf, binary.BigEndian, []byte{0x16, 0x3, 0x1, 0x1, 0x3a, 0x1, 0x0, 0x1, 0x36, 0x3, 0x3, 0x45, 0x88, 0x6f, 0xaf, 0x97, 0x2e, 0x35, 0xa, 0xa0, 0xc6, 0x40, 0x98, 0x84, 0x25, 0x4b, 0xc4, 0x31, 0x9e, 0x5a, 0x3f, 0xf8, 0x6e, 0x56, 0xc, 0xe1, 0x10, 0xa, 0xcf, 0xb4, 0xab, 0x1e, 0x7a, 0x20, 0xea, 0xb0, 0x4d, 0x94, 0xaa, 0x2f, 0x2f, 0x63, 0x8e, 0x10, 0x2a, 0x88, 0x8b, 0x48, 0x29, 0x99, 0xd2, 0x21, 0xa2, 0x62, 0x7d, 0x83, 0x74, 0xc8, 0x83, 0xa3, 0x4c, 0x18, 0x99, 0x77, 0xfc, 0xeb, 0x0, 0x62, 0x13, 0x2, 0x13, 0x3, 0x13, 0x1, 0xc0, 0x30, 0xc0, 0x2c, 0xc0, 0x28, 0xc0, 0x24, 0xc0, 0x14, 0xc0, 0xa, 0x0, 0x9f, 0x0, 0x6b, 0x0, 0x39, 0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0xaa, 0xff, 0x85, 0x0, 0xc4, 0x0, 0x88, 0x0, 0x81, 0x0, 0x9d, 0x0, 0x3d, 0x0, 0x35, 0x0, 0xc0, 0x0, 0x84, 0xc0, 0x2f, 0xc0, 0x2b, 0xc0, 0x27, 0xc0, 0x23, 0xc0, 0x13, 0xc0, 0x9, 0x0, 0x9e, 0x0, 0x67, 0x0, 0x33, 0x0, 0xbe, 0x0, 0x45, 0x0, 0x9c, 0x0, 0x3c, 0x0, 0x2f, 0x0, 0xba, 0x0, 0x41, 0xc0, 0x11, 0xc0, 0x7, 0x0, 0x5, 0x0, 0x4, 0xc0, 0x12, 0xc0, 0x8, 0x0, 0x16, 0x0, 0xa, 0x0, 0xff, 0x1, 0x0, 0x0, 0x8b, 0x0, 0x2b, 0x0, 0x9, 0x8, 0x3, 0x4, 0x3, 0x3, 0x3, 0x2, 0x3, 0x1, 0x0, 0x33, 0x0, 0x26, 0x0, 0x24, 0x0, 0x1d, 0x0, 0x20, 0xed, 0x7, 0xea, 0x17, 0xf2, 0x33, 0x83, 0x69, 0x5, 0x94, 0x89, 0xc7, 0x9f, 0x57, 0x19, 0xcd, 0x6b, 0xcb, 0xe7, 0x22, 0x3d, 0xb1, 0x1b, 0x8b, 0xe1, 0x52, 0x1d, 0xc2, 0x49, 0x48, 0xe4, 0x3d, 0x0, 0x0, 0x0, 0xe, 0x0, 0xc, 0x0, 0x0, 0x9, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x0, 0xb, 0x0, 0x2, 0x1, 0x0, 0x0, 0xa, 0x0, 0xa, 0x0, 0x8, 0x0, 0x1d, 0x0, 0x17, 0x0, 0x18, 0x0, 0x19, 0x0, 0xd, 0x0, 0x18, 0x0, 0x16, 0x8, 0x6, 0x6, 0x1, 0x6, 0x3, 0x8, 0x5, 0x5, 0x1, 0x5, 0x3, 0x8, 0x4, 0x4, 0x1, 0x4, 0x3, 0x2, 0x1, 0x2, 0x3, 0x0, 0x10, 0x0, 0xe, 0x0, 0xc, 0x2, 0x68, 0x32, 0x8, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31})
	// Record Layer
	buf.WriteByte(0x16)                                  // Handshake
	binary.Write(&buf, binary.BigEndian, uint16(0x0301)) // TLS 1.2
	// Placeholder for length
	lengthPos := buf.Len()
	buf.Write([]byte{0, 0})

	// Handshake Layer
	buf.WriteByte(0x01) // ClientHello
	// Placeholder for handshake length
	hsLenPos := buf.Len()
	buf.Write([]byte{0, 0, 0})

	// Version
	binary.Write(&buf, binary.BigEndian, uint16(0x0303)) // TLS 1.2

	// Random
	random := make([]byte, 32)
	rand.Read(random)
	buf.Write(random)

	// Session ID
	buf.WriteByte(0) // Session ID length

	// Cipher Suites
	ciphersLen := len(ciphers) * 2
	binary.Write(&buf, binary.BigEndian, uint16(ciphersLen)) // length in byte
	// buf.Write([]byte{0x13, 0x2, 0x13, 0x3, 0x13, 0x1, 0xc0, 0x30, 0xc0, 0x2c, 0xc0, 0x28, 0xc0, 0x24, 0xc0, 0x14, 0xc0, 0xa, 0x0, 0x9f, 0x0, 0x6b, 0x0, 0x39, 0xcc, 0xa9, 0xcc, 0xa8, 0xcc, 0xaa, 0xff, 0x85, 0x0, 0xc4, 0x0, 0x88, 0x0, 0x81, 0x0, 0x9d, 0x0, 0x3d, 0x0, 0x35, 0x0, 0xc0, 0x0, 0x84, 0xc0, 0x2f, 0xc0, 0x2b, 0xc0, 0x27, 0xc0, 0x23, 0xc0, 0x13, 0xc0, 0x9, 0x0, 0x9e, 0x0, 0x67, 0x0, 0x33, 0x0, 0xbe, 0x0, 0x45, 0x0, 0x9c, 0x0, 0x3c, 0x0, 0x2f, 0x0, 0xba, 0x0, 0x41, 0xc0, 0x11, 0xc0, 0x7, 0x0, 0x5, 0x0, 0x4, 0xc0, 0x12, 0xc0, 0x8, 0x0, 0x16, 0x0, 0xa, 0x0, 0xff})
	binary.Write(&buf, binary.BigEndian, ciphers)

	// Compression Methods
	buf.WriteByte(1) // length
	buf.WriteByte(0) // null compression

	// Extensions
	extensionsBytes := []byte{}
	extensionsBytes = append(extensionsBytes, []byte{0x0, 0x2b, 0x0, 0x9, 0x8, 0x3, 0x4, 0x3, 0x3, 0x3, 0x2, 0x3, 0x1}...)                                                                                                                                                                                    // supported versions
	extensionsBytes = append(extensionsBytes, []byte{0x0, 0x33, 0x0, 0x26, 0x0, 0x24, 0x0, 0x1d, 0x0, 0x20, 0xed, 0x7, 0xea, 0x17, 0xf2, 0x33, 0x83, 0x69, 0x5, 0x94, 0x89, 0xc7, 0x9f, 0x57, 0x19, 0xcd, 0x6b, 0xcb, 0xe7, 0x22, 0x3d, 0xb1, 0x1b, 0x8b, 0xe1, 0x52, 0x1d, 0xc2, 0x49, 0x48, 0xe4, 0x3d}...) // key_share
	extensionsBytes = append(extensionsBytes, []byte{0x0, 0x0, 0x0, 0xe, 0x0, 0xc, 0x0, 0x0, 0x9, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74}...)                                                                                                                                                   // server_name
	extensionsBytes = append(extensionsBytes, []byte{0x0, 0xb, 0x0, 0x2, 0x1, 0x0}...)                                                                                                                                                                                                                        //ec_point_formats
	extensionsBytes = append(extensionsBytes, []byte{0x0, 0xa, 0x0, 0xa, 0x0, 0x8, 0x0, 0x1d, 0x0, 0x17, 0x0, 0x18, 0x0, 0x19}...)                                                                                                                                                                            // support_groups
	extensionsBytes = append(extensionsBytes, []byte{0x0, 0xd, 0x0, 0x18, 0x0, 0x16, 0x8, 0x6, 0x6, 0x1, 0x6, 0x3, 0x8, 0x5, 0x5, 0x1, 0x5, 0x3, 0x8, 0x4, 0x4, 0x1, 0x4, 0x3, 0x2, 0x1, 0x2, 0x3}...)
	extensionsBytes = append(extensionsBytes, []byte{0x0, 0x10, 0x0, 0xe, 0x0, 0xc, 0x2, 0x68, 0x32, 0x8, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31}...) // alpn                                                                                                     // signature algorithms

	extensionsLen := len(extensionsBytes)
	binary.Write(&buf, binary.BigEndian, uint16(extensionsLen)) // length in bytes
	binary.Write(&buf, binary.BigEndian, extensionsBytes)       // length in bytes
	// // supported versions
	// binary.Write(&buf, binary.BigEndian, []byte{0x0, 0x2b, 0x0, 0x9, 0x8, 0x3, 0x4, 0x3, 0x3, 0x3, 0x2, 0x3, 0x1})
	// // key_share
	// binary.Write(&buf, binary.BigEndian, []byte{0x0, 0x33, 0x0, 0x26, 0x0, 0x24, 0x0, 0x1d, 0x0, 0x20, 0xed, 0x7, 0xea, 0x17, 0xf2, 0x33, 0x83, 0x69, 0x5, 0x94, 0x89, 0xc7, 0x9f, 0x57, 0x19, 0xcd, 0x6b, 0xcb, 0xe7, 0x22, 0x3d, 0xb1, 0x1b, 0x8b, 0xe1, 0x52, 0x1d, 0xc2, 0x49, 0x48, 0xe4, 0x3d})
	// // server_name
	// binary.Write(&buf, binary.BigEndian, []byte{0x0, 0x0, 0x0, 0xe, 0x0, 0xc, 0x0, 0x0, 0x9, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74})
	// // ec_point_formats
	// binary.Write(&buf, binary.BigEndian, []byte{0x0, 0xb, 0x0, 0x2, 0x1, 0x0})
	// // supported_groups
	// binary.Write(&buf, binary.BigEndian, []byte{0x0, 0xa, 0x0, 0xa, 0x0, 0x8, 0x0, 0x1d, 0x0, 0x17, 0x0, 0x18, 0x0, 0x19})
	// // signature algorithms
	// binary.Write(&buf, binary.BigEndian, []byte{0x0, 0xd, 0x0, 0x18, 0x0, 0x16, 0x8, 0x6, 0x6, 0x1, 0x6, 0x3, 0x8, 0x5, 0x5, 0x1, 0x5, 0x3, 0x8, 0x4, 0x4, 0x1, 0x4, 0x3, 0x2, 0x1, 0x2, 0x3})
	// // application layer protocol negotiation
	// binary.Write(&buf, binary.BigEndian, []byte{0x0, 0x10, 0x0, 0xe, 0x0, 0xc, 0x2, 0x68, 0x32, 0x8, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31})
	// binary.Write(&buf, binary.BigEndian, []byte{0x0, 0x93, 0x0, 0x2b, 0x0, 0x9, 0x8, 0x3, 0x4, 0x3, 0x3, 0x3, 0x2, 0x3, 0x1, 0x0, 0x33, 0x0, 0x26, 0x0, 0x24, 0x0, 0x1d, 0x0, 0x20, 0xf5, 0x3d, 0xb5, 0x7b, 0x38, 0xe5, 0x5c, 0x6a, 0xb, 0x2f, 0x33, 0x6b, 0xfc, 0x43, 0xc8, 0x9b, 0xe5, 0xa2, 0x84, 0x92, 0xfc, 0xa, 0xb9, 0x30, 0x85, 0x78, 0x7, 0x4d, 0x2a, 0xac, 0xbe, 0x6b, 0x0, 0x0, 0x0, 0x16, 0x0, 0x14, 0x0, 0x0, 0x11, 0x73, 0x65, 0x61, 0x6c, 0x2e, 0x64, 0x69, 0x67, 0x69, 0x63, 0x65, 0x72, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x0, 0xb, 0x0, 0x2, 0x1, 0x0, 0x0, 0xa, 0x0, 0xa, 0x0, 0x8, 0x0, 0x1d, 0x0, 0x17, 0x0, 0x18, 0x0, 0x19, 0x0, 0xd, 0x0, 0x18, 0x0, 0x16, 0x8, 0x6, 0x6, 0x1, 0x6, 0x3, 0x8, 0x5, 0x5, 0x1, 0x5, 0x3, 0x8, 0x4, 0x4, 0x1, 0x4, 0x3, 0x2, 0x1, 0x2, 0x3, 0x0, 0x10, 0x0, 0xe, 0x0, 0xc, 0x2, 0x68, 0x32, 0x8, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x31, 0x2e, 0x31})

	// Fill in handshake length
	handshakeLen := buf.Len() - hsLenPos - 3
	b := buf.Bytes()
	b[hsLenPos] = byte(handshakeLen >> 16)
	b[hsLenPos+1] = byte(handshakeLen >> 8)
	b[hsLenPos+2] = byte(handshakeLen)

	// Fill in record length
	recordLen := buf.Len() - lengthPos - 2
	b[lengthPos] = byte(recordLen >> 8)
	b[lengthPos+1] = byte(recordLen)

	return b, nil
	// return buf.Bytes(), nil
}

func sendClientHelloAndParseServerHello(addr string, clientHello []byte) error {
	conn, err := net.DialTimeout("tcp", addr, 5*time.Second)
	if err != nil {
		return err
	}
	defer conn.Close()

	conn.SetWriteDeadline(time.Now().Add(2 * time.Second))
	_, err = conn.Write(clientHello)
	if err != nil {
		return err
	}

	// Read the response (first record)
	conn.SetReadDeadline(time.Now().Add(2 * time.Second))
	resp := make([]byte, 4096)
	n, err := conn.Read(resp)
	if err != nil {
		return err
	}

	// Parse ServerHello
	return parseServerHello(resp[:n])
}

func parseServerHello(data []byte) error {
	if len(data) < 5 {
		return fmt.Errorf("response too short")
	}
	// TLS record header: type(1), version(2), length(2)
	recordType := data[0]
	version := binary.BigEndian.Uint16(data[1:3])
	length := binary.BigEndian.Uint16(data[3:5])
	fmt.Printf("Record type: 0x%02x, Version: 0x%04x, Length: %d\n", recordType, version, length)

	// Handshake header: type(1), length(3)
	if len(data) < 9 {
		return fmt.Errorf("not enough data for handshake header")
	}
	hsType := data[5]
	hsLen := int(data[6])<<16 | int(data[7])<<8 | int(data[8])
	fmt.Printf("Handshake type: 0x%02x, Length: %d\n", hsType, hsLen)

	// ServerHello fields
	if hsType != 0x02 {
		return fmt.Errorf("expected ServerHello (0x02), got 0x%02x", hsType)
	}
	// Version
	serverVersion := binary.BigEndian.Uint16(data[9:11])
	fmt.Printf("ServerHello version: 0x%04x\n", serverVersion)
	// Random (32 bytes)
	// SessionID
	sessionIDLen := int(data[43])
	cipherSuiteOffset := 44 + sessionIDLen
	cipherSuite := binary.BigEndian.Uint16(data[cipherSuiteOffset : cipherSuiteOffset+2])
	fmt.Printf("Negotiated cipher: 0x%04x\n", cipherSuite)
	return nil
}
