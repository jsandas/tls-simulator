package main

import (
	"crypto/tls"
	"fmt"
)

const (
	TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384     = uint16(49192)
	TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384   = uint16(49188)
	TLS_DHE_RSA_WITH_AES_256_GCM_SHA384       = uint16(159)
	TLS_DHE_RSA_WITH_AES_256_CBC_SHA256       = uint16(107)
	TLS_DHE_RSA_WITH_AES_256_CBC_SHA          = uint16(57)
	TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256 = uint16(52394)
	TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256  = uint16(196)
	TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA     = uint16(136)
	TLS_GOSTR341001_WITH_28147_CNT_IMIT       = uint16(129)
	TLS_RSA_WITH_AES_256_CBC_SHA256           = uint16(61)
	TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256      = uint16(192)
	TLS_RSA_WITH_CAMELLIA_256_CBC_SHA         = uint16(132)
	TLS_DHE_RSA_WITH_AES_128_GCM_SHA256       = uint16(158)
	TLS_DHE_RSA_WITH_AES_128_CBC_SHA256       = uint16(103)
	TLS_DHE_RSA_WITH_AES_128_CBC_SHA          = uint16(51)
	TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256  = uint16(190)
	TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA     = uint16(69)
	TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256      = uint16(186)
	TLS_RSA_WITH_CAMELLIA_128_CBC_SHA         = uint16(65)
	TLS_RSA_WITH_RC4_128_MD5                  = uint16(4)
	TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA     = uint16(49160)
	TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA         = uint16(22)
	TLS_EMPTY_RENEGOTIATION_INFO_SCSV         = uint16(255)
)

func main() {

	// fmt.Println(dicttls.DictCipherSuiteValueIndexed[uTlsConn.ConnectionState().CipherSuite])
	ciphers := []uint16{
		tls.TLS_AES_256_GCM_SHA384,
		tls.TLS_CHACHA20_POLY1305_SHA256,
		tls.TLS_AES_128_GCM_SHA256,
		tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
		tls.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,
		TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384,
		TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384,
		tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
		tls.TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA,
		TLS_DHE_RSA_WITH_AES_256_GCM_SHA384,
		TLS_DHE_RSA_WITH_AES_256_CBC_SHA256,
		TLS_DHE_RSA_WITH_AES_256_CBC_SHA,
		tls.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256,
		tls.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
		TLS_DHE_RSA_WITH_CHACHA20_POLY1305_SHA256,
		TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA256,
		TLS_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA,
		TLS_GOSTR341001_WITH_28147_CNT_IMIT,
		tls.TLS_RSA_WITH_AES_256_GCM_SHA384,
		TLS_RSA_WITH_AES_256_CBC_SHA256,
		tls.TLS_RSA_WITH_AES_256_CBC_SHA,
		TLS_RSA_WITH_CAMELLIA_256_CBC_SHA256,
		TLS_RSA_WITH_CAMELLIA_256_CBC_SHA,
		tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
		tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
		tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256,
		tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256,
		tls.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA,
		tls.TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA,
		TLS_DHE_RSA_WITH_AES_128_GCM_SHA256,
		TLS_DHE_RSA_WITH_AES_128_CBC_SHA256,
		TLS_DHE_RSA_WITH_AES_128_CBC_SHA,
		TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA256,
		TLS_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA,
		tls.TLS_RSA_WITH_AES_128_GCM_SHA256,
		tls.TLS_RSA_WITH_AES_128_CBC_SHA256,
		tls.TLS_RSA_WITH_AES_128_CBC_SHA,
		TLS_RSA_WITH_CAMELLIA_128_CBC_SHA256,
		TLS_RSA_WITH_CAMELLIA_128_CBC_SHA,
		tls.TLS_ECDHE_RSA_WITH_RC4_128_SHA,
		tls.TLS_ECDHE_ECDSA_WITH_RC4_128_SHA,
		tls.TLS_RSA_WITH_RC4_128_SHA,
		TLS_RSA_WITH_RC4_128_MD5,
		tls.TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA,
		TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA,
		TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA,
		tls.TLS_RSA_WITH_3DES_EDE_CBC_SHA,
		TLS_EMPTY_RENEGOTIATION_INFO_SCSV,
	}
	clientHello, err := buildClientHelloTLS12(tls.VersionTLS12, ciphers, nil)
	if err != nil {
		panic(err)
	}
	err = sendClientHelloAndParseServerHello("localhost:443", clientHello)
	if err != nil {
		fmt.Println("Handshake failed:", err)
	}
}
